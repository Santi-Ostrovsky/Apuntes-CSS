/* CSS → CASCADING STYLE SHEETS */

/* Buscar Generadores de formas, efectos y animaciones a la hora de hacer un CSS, ya que es mucho mas fácil y mas eficiente. Ej: generador de sombras para texto, o generador de deformaciones (transition-skew) de elementos. */

/* Selectores

- Selector Universal --→ * (asterisco) 
- Selector de tipo --> nombre de etiqueta
- Selector de clase --→ .[clase] (punto[clase])
- Selector de ID --→ #[id] (numeral[ID])
- Selector de atributo --→ [att="value"]
- Selector por descendencia --→ [etiqueta padre] [etiqueta hija]
    Ej: <h2> <p> Hola </p> </h2> --> En este caso, para modificar el elemento <p> pero solo a los <p> que estén dentro de un <h2>, se pone: h2 p {...valores css...}. Se especifica de mas grande a mas chico.

    Se puede hacer de igual manera con clases, ID's o atributos. Ej: .titulos p // #titulo p // [att='val'] p {...valores css...}.

- Selector de pseudo-clases --→ [elemento]:[evento] Ej: p:hover

https://www.w3schools.com/cssref/css_selectors.asp
*/

/* --------------------------------------------------- */

/* PRIORIDAD / JERARQUÍA / ESPECIFICIDAD.

!important > estilos en linea (html) > ID's > clases, pseudo-clases, atributos > elementos, pseudo-elementos.
*/

/* --------------------------------------------------- */

/* ESPECIFICAR HIJOS (metodología de Venn)

:first-child
[clase padre]__[clase hija]--[elemento especial] EJ: .form__input--active
*/

/* --------------------------------------------------- */

/* UNIDADES DE MEDIDA

FIJAS: NO CAMBIAN NUNCA.
    - px (pixeles)
    - cm (centímetros)
    - mm (milímetros)
    - pt (puntos)

RELATIVAS: VARIABLES, DEPENDEN DEL DOCUMENTO O EVENTOS.
    - rem (tiene como referencia el root)
    - em - (por defecto, 1em = 16px) Cada EM es equivalente a los valores fijos utilizados en los elementos padres (Ej: un formulario tiene tamaño de letra de 20px, si en un child de ese formulario como los inputs, se establece un tamaño de letra de 2 em, el tamaño real de esa letra va a ser de 40px, porque cada em equivale a 20px, el valor fijo estipulado en el elemento padre.
    - vw (viewport-width)
    - vh (viewport-height)
    - % (porcentaje del contenedor - caja que contiene al elemento).
    - auto (el navegador calcula de forma automática los valores, dependiendo de la posición del contenedor modificado).
*/

/* --------------------------------------------------- */

/* TAMAÑO DE LOS CONTENEDORES

box-sizing: 
    - content-box : se ajusta de acuerdo al contenido de la caja. Si se agranda el borde, se agranda el contenedor.
    - border-box : todo el contenido se ajusta al tamaño del contenedor, y todo lo que ocupe espacio va a reducir el espacio de los demás elementos dentro de la caja.
    */

/* --------------------------------------------------- */

/* OUTLINE - Borde que no afecta el tamaño de las cajas o contenedores. Deja de ser visible si no tiene espacio para mostrarse. No ocupa espacio.

Sin importar cual sea el valor de box-sizing, el outline solo va a mostrarse si hay lugar para que suceda.
*/

/* --------------------------------------------------- */

/* POSITION - propiedades top y left tiene prioridad por sobre las demás posiciones.

- static : No renderiza el elemento de ninguna manera en particular.

- relative : en comparacion a los elementos que anteceden al contenedor, los elementos nuevos están por encima de los elementos anteriores. Se reserva el lugar original que ocupan los elementos con posicionamiento relativo.

- absolute : a diferencia de 'relative', ubica al elemento en una ubicación relativa al elemento padre (en lugar de los elementos anteriores y/o posteriores) y modifica la disposición de los elementos alrededor. No se reserva el lugar original que ocupan los elementos con posicionamiento absoluto.

- fixed : como 'absolute' pero queda fijo en el viewport. Se logra el efecto de las publicidades que quedan fijas en pantalla cuando uno baja o scrollea por una pagina web.

- sticky :es una mezcla entre relative y fixed, en el sentido que tiene un lugar reservado en la pagina, pero se queda pegado en la pantalla al pasar por encima del elemento. Si se encuentra en la mitad del scroll, al pasar por ese lugar, el elemento se va a quedar en pantalla, pero va a volver a su lugar si volvemos hacia arriba en la pagina.

*/

/* --------------------------------------------------- */

/* Z INDEX

Representa la profundidad de los elementos (en capas). El numero mayor va a tener prioridad por sobre el numero menor, es decir, que va a "tapar" a los numeros menores y va a estar mas cerca de la pantalla.

Para poner elementos padre por encima de los elementos hijos, los elementos hijo debe tener un Z INDEX negativo (-1), y el padre NO debe tener un Z INDEX.
*/

/* --------------------------------------------------- */

/* DISPLAY

- BLOCK - etiqueta de bloque.
- INLINE - etiqueta de linea.

- INLINE-BLOCK - etiqueta de linea pero se le pueden aplicar atributos de bloque.

- FLEX - 
- GRID - 

- INLINE-FLEX - 
- INLINE-GRID - 
*/

/* --------------------------------------------------- */

/* OVERFLOW (-x; -y)

Que se hace con el contenido de texto o del tipo que sea, que sobresale del contenedor?

valores:
    - visible: valor por defecto, hace que el contenido se vea por fuera de su contenedor.
    - scroll: mete el contenido dentro de la caja y pone una barra de desplazamiento (scroll) para subir y bajar y para desplazarse lateralmente. Estas barras aparecen aunque el contenido no sobresalga del contenedor.
    - auto: detecta cuando el contenido sobresale del contenedor, y en caso de hacerlo, lo mete dentro de la caja contenedora, permitiendo scrollear dentro de la misma.
    - hidden: oculta el contenido que sobresalga del contenedor. 
    - */

/* --------------------------------------------------- */

/* FLOAT - sirve para envolver contenido dentro de otro contenido, como por ejemplo, envolver una imagen con un párrafo de texto.
*/

/* --------------------------------------------------- */

/* PSEUDO-ELEMENTOS

https://developer.mozilla.org/es/docs/Web/CSS/Pseudo-elements

- ::first-line      |   BLOCK
- ::first-letter    |   BLOCK
- ::placeholder
- ::selection

- ::after           |   HIJOS - CONTENT (NECESARIO) - INLINE
- ::before          |   HIJOS - CONTENT (NECESARIO) - INLINE

--→ Before y after (por ejemplo con el atributo content:'cualquier texto que se quiera') permiten generar contenido antes y después del elemento seleccionado, pero sin llegar este nuevo contenido a ser un elemento en si mismo. No se puede seleccionar con el cursor como el resto del texto, ni cuenta como elementos del DOM, es decir, no pueden ser modificados de forma dinámica.

*/

/* --------------------------------------------------- */

/* PSEUDO-CLASES

https://developer.mozilla.org/es/docs/Web/CSS/Pseudo-classes

https://www.w3schools.com/css/css_pseudo_classes.asp

- :hover ()
- :link (links NO visitados)
- :visited (links visitados)
- :active (mientras se mantenga presionado un elemento con el cursor)
- :focus (cuando se activa o selecciona un input)
- :lang ('param') --> es una funcion, que aplica estilos al contenido de un determinado lenguaje (lenguaje que debe estar determinado por los atributos de los elementos con la propiedad 'lang' en html.
*/

/* --------------------------------------------------- */

/* Propiedades de animación

- TRANSITION
- TRANSFORM
*/

/* --------------------------------------------------- */

/* OBJECT-FIT

- fill -> rellena el espacio de acuerdo a la resolucion que forzosamente se le da a la imagen en los estilos.

- contain -> valor por defecto. Hace que la resolucion de las imágenes se ajusten al contenido, para que no se alarguen o se ensanchen, modificando la resolucion original.

- cover -> La imagen adapta su resolucion para entrar dentro del contenedor, pero si se agranda de manera que su contenido queda por fuera del mismo, si 'overflow' automáticamente se transforma en 'hidden' para solo mostrar la imagen dentro del contenedor y no fuera de él. Si el contenedor es muy grande en comparacion a la imagen, la misma se va a agrandar tanto dentro del contenedor que se va a ver solo una pequeña parte dentro de la misma.

- scale-down -> Se queda con la menor resolución, ya sea la de la imagen, o la del contenedor, para que entre de forma completa dentro de este ultimo.

- none -> NO va a modificar la imagen de acuerdo al tamaño de su contenedor. La resolución de la misma va a permanecer fija en su resolución original, o la dada por parámetros de estilo.

(SE PUEDE APLICAR UNA COMBINACIÓN DE OBJECT-FIT='COVER' + MIN-WIDTH PARA QUE SIN IMPORTAR EL TAMAñO DEL VIEWPORT, LAS IMÁGENES SIEMPRE TENGAN LA RESOLUCION CORRECTA, Y SE AJUSTEN AL TAMAñO DE LA PANTALLA)


OBJECT-POSITION (se combina con object-fit para ubicar el contenido de una forma especifica).

- left - right - top - bottom
- px - em - % - etc
*/

/* --------------------------------------------------- */

/* CURSOR (sirve para cambiar el cursor al posicionarse dentro de un elemento)

https://uniwebsidad.com/libros/css/capitulo-13/personalizar-el-cursor

ej:
div {
    cursor: pointer;
}

Eso transforma la flecha del cursor en la 'manito' que selecciona elementos.
*/

/* --------------------------------------------------- */

/* COLORES

- Color Name (no recomendado, cada navegador puede definir los colores de manera distinta)
- Hexadecimal (# - 3 o 6 valores es RGB, 4 u 8 valores es RGBA)
- RGB (red, green, blue)
- RGBA (red, green, blue, alpha - opacidad)
- HSL
- HSLA
*/

/* --------------------------------------------------- */

/* VARIABLES

VARIABLES GLOBALES (pueden usarse para todos los elementos)
    - :root {
        --color-rojo: #f40
    }

    --> para luego usar la variable "--color-rojo", se escribe como: "var(--color-rojo)" cuando haya que poner un color.

VARIABLES LOCALES (solo pueden usarse en un tipo de elemento)
    - p {
        --color-rojo: #f40
    }

    --> La variable "--color-rojo" solo va a poder utilizarse en los elementos <p>.
*/

/* --------------------------------------------------- */

/* RESPONSIVE DESIGN - MOBILE FIRST

Lo mas correcto en cuando al responsive design, es que se trabaje con la metodología 'Mobile First', en la cual el contenido se optimiza para dispositivos mobiles y se adapta a mayores resoluciones (de mas chico a mas grande). Esto hace que Google posicione mejor a las páginas con este tipo de diseño.

Dalto CSS 4:20:00 en adelante
*/

/* --------------------------------------------------- */

/* FLEXBOX

Dalto CSS 4:48:55 en adelante

El flujo normal de CSS es el siguiente:
                |  cross-start
                |
main-start      |       main-end
    ------------------------→
                |
                |
                ↓  cross-end

Flexbox tiene la capacidad de alterar ese flujo de contenido.

CONCEPTOS:
    - Contenedor - Contenido
    - Flex container - Flex item
    - Main Axis (main-start - main-end)
    - Cross Axis (cross-start - cross-end)

PROPIEDADES FLEX:
- order
- flex-grow
- flex-shrink
- flex-basis
- flex
- align-self

PROPIEDADES DE LOS CONTENEDORES FLEX:
    - flex-direction (row, row-reverse, column, column-reverse) dirección del flujo.
    - flex-wrap (no-wrap, wrap, wrap-reverse) - respetar el ancho de los elementos.
    - flex-flow (flex-direction, flex-wrap)
    - justify-content (center, space-around, space-between, space-evenly) ==> main-axis
    - align-items (flex-start, center, flex-end, stretch, baseline) ==> cross-axis
    - align-content ==> cross-axis (idem align-items, para mas de una linea).

PROPIEDADES DE LOS ITEMS FLEX:
    - align-self ==> cross-axis

FLEX-GROW -- 5:21:10
FLEX-BASIS -- 5:25:47
FLEX-SHRINK -- 5:27:29
ORDER -- 5:36:15







*/

/* --------------------------------------------------- */

/* GRID

DALTO CSS 6:05:00







*/

/* --------------------------------------------------- */

/* RESPONSIVE DESIGN

Estructuras flexibles (contenedores, imágenes y videos flexibles)

@media ==> se usa en consultas de medios para aplicar diferentes estilos para diferentes dispositivos (media query)

PARÁMETROS DE MEDIA QUERIES:
    1 → Ancho y Alto de la ventana gráfica
    2 → Ancho y Alto del dispositivo
    3 → Orientación - dispositivo en modo vertical u horizontal (portrait / landscape)
    4 → Resolución

TIPOS DE MEDIA QUERIES:
    A → All - Apto para todos los dispositivos
    B → Print - Material impreso y visualización en vista previa de impresión
    C → Screen - Destinado principalmente a las pantallas
    D → Speech - Destinado a sintetizadores de voz

CONDICIONALES:
    - AND
    - OR


==> MOBILE FIRST (se adapta de celular a otras resoluciones como 16:9, hasta el ultra-wide 21:9) MEJOR OPCIÓN

==> DESKTOP FIRST (se adapta de escritorio a todas las demás resoluciones)

==> CONTENT FIRST (primero se renderiza el contenido, y después se evalúa en que dispositivo debe mostrarse)

----

SINTAXIS DE MEDIA QUERIES

- @media [tipo-de-media-query] [condicional] ([condición])

Ej: @media screen and (min-width: 400px) {...} ==> se lee: Aplicar media-query del tipo 'screen' cuando el viewport sea mayor a 400 pixeles de ancho.

Ej-2: @media screen and (min-width: 400px) and (max-width: 500px) {...} ==> se lee: Aplicar media-query del tipo 'screen' cuando el viewport esté entre los 400 y los 500 píxeles de ancho.

----



*/

/* --------------------------------------------------- */

/* TRANSITIONS -- tener en cuenta que si un sitio esta cargado de animaciones (sobre todo animaciones sin especificación de tipo), el sitio va a tardar mucho en cargar, y es posible que baje la retención de usuarios por ese tiempo de carga. Es mejor 'animar' los elementos usando TRANSFORM, ya que crea los elementos en una capa superior, sin modificar el layout completo del sitio (mas eficiente).

    - transition-property (lo que se modifica)
    - transition-duration (duración de la transición para que no sea instantánea)
    - transition-delay (lo que tarda en activarse y desactivarse la transición)
    - transition-timing-function (transición en función del tiempo) ==> linear | ease | ease-in | ease-out | ease-in-out | step-start | step-end | steps(int,start|end) | initial | inherit;
    - transition

Ejemplo:

div {
    height: 100px;
    width: 100px
    background: grey;
    transition-property: background (acá se especifica cuál es la propiedad que cambia, porque si se pone 'all', el navegador va a tener que calcular cuales son las propiedades alteradas en cada movimiento, y eso hace que la página tarde mas en cargar).
    transition-duration: 1s;
}

div:hover {
    background: red;
}

Para que los cambios (transitions) se ejecuten, es necesario disparar un evento a través de un event-listener.

*/

/* --------------------------------------------------- */

/* ANIMACIONES - @keyframes

    - animation-name (nombre)
    - animation-duration (duración)
    - animation-delay (delay)
    - animation-timing-function (valores de transición)
    - animation-iteration-count (cantidad de veces)
    - animation-fill-mode (none | forwards | backwards | both | initial | inherit)
    - animation-direction (normal | reverse | alternate | alternate-reverse)

SINTAXIS DE LAS ANIMACIONES

@keyframes [nombre-de-la-animación] {
    from | 0% {
        [propiedades al comienzo]
    }
    50% {
        [propiedades a la mitad de la animación (pueden darse tantos pasos en porcentaje como se quiera)]
    }
    to | 100% {
        [propiedades al final]
    }
}
*/

/* --------------------------------------------------- */

/* TRANSFORM

    - translateX([nro]%) ==> mueve en el eje X (positivo o negativo)
    - translateY([nro]%) ==> mueve en el eje Y (positivo o negativo)
    - translate([x]%, [y]%) ==> short-cut para X & Y.

    -scale([multiplicador de escala]) ==> ej: scale(2) es el doble de grande.
    - scaleX([multiplicador en X])
    - scaleY([multiplicador en Y])

    - skew([num]deg) ==> inclinar el elemento [num] grados.

*/

/* --------------------------------------------------- */

/* BACKGROUND

    - background-img: url([link-de-la-imagen])
    
    - background-color: [color]
    
    - background-size: (x, y, auto, cover, contain)
    
    - background-position: (left, top, bottom, right, center) ==> toma dos parámetros separados por coma: [param.-por-X], [para.-por-Y].
    
    - background-attachment: (scroll, fixed, inherit) ==> esto es lo que se usa para que las imágenes de fondo queden fijamente posicionadas al scrollear por la pagina (scroll vs fixed)
    
    - background-clip: (border-box, padding-box, content-box) ==> corta la imagen dependiendo del parámetro ingresado.
    
    - background-origin: (border-box, padding-box, content-box) ==> origina nuevamente la imagen con la resolucion del contenedor, dependiendo del parametro ingresado.
    
    - background-repeat: (repeat, no-repeat) ==> imagen en mosaico
    
    - background: linear-gradient([color1], [color2]) ==> fondo con degrade de colores, de color 1 a color 2.

*/

/* --------------------------------------------------- */

/* FILTROS (para imágenes y vectores)

    - filter: blur([num]px)
    - filter: brightness([num])
    - filter: contrast([num | %])
    - filter: drop-shadow([medidas]) ==> sombras para vectores / imágenes transparentes != de sombras para cajas (box-shadow)
    - filter: grayscale([num]%)
    - filter: hue-rotate([num]deg) ==> rota la gama de colores
    - filter: invert([num]%) ==> invierte los colores
    - filter: opacity([num]%) ==> transparencia
    - filter: saturate([num]%) ==> saturación de colores
    - filter: sepia([num]%)
    - filter: url("filters.svg#filter-id")

EFECTO BUENÍSIMO CON FILTROS - DALTO CSS 9:21:24
*/

/* --------------------------------------------------- */

/* OTRAS PROPIEDADES

    - direction: (ltr, rtl, initial, inherit) ==> justificación de contenido
    - letter-spacing: ([num]px)
    -scroll-behavior: smooth ==> se usa para que las transiciones de links internos sea mas tranquila (por ejemplo, menu de navegación para un documento de texto muy largo). Esta propiedad se le da al contenedor de los elementos en los cuales pasa la transición.
    - user-selected: none ==> no permite que el contenido sea seleccionado con el cursor por el usuario (por ejemplo, para impedir el copy-paste del contenido de la pagina).
    - text-shadow: (BUSCAR)

*/
